#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

#define SS_PIN 10
#define RST_PIN 9
#define LED_PIN_1 2
#define LED_PIN_2 3

MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo servoMotor;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  servoMotor.attach(5);
  pinMode(LED_PIN_1, OUTPUT);
  pinMode(LED_PIN_2, OUTPUT);
   // Desligar os LEDs no início
  digitalWrite(LED_PIN_1, LOW);
  digitalWrite(LED_PIN_2, LOW);
}

void loop() {
  digitalWrite(LED_PIN_1, HIGH);
  digitalWrite(LED_PIN_2, LOW);
  // Verifica se um cartão está presente
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    // Lê o UID do cartão RFID
    String cardUID = getCardUID();

    // Verifica se o UID corresponde ao cartão "b39494fd"
    if (cardUID == "b39494fd") {
      Serial.println("Acesso liberado");

      digitalWrite(LED_PIN_1, LOW);
      digitalWrite(LED_PIN_2, HIGH);
      // Gira o servo em 90 graus
      servoMotor.write(90);
      delay(2000); // Pausa de 1 segundo para o servo completar o movimento
      servoMotor.write(-90);
      delay(500);
      digitalWrite(LED_PIN_1, HIGH);
      digitalWrite(LED_PIN_2, LOW);
      // Retorne o servo à posição inicial (0 graus) se necessário
      // servoMotor.write(0);
      // delay(1000);

      // Você pode adicionar mais ações aqui, se necessário
    } else {
      Serial.println("Cartão inválido!");
    }

    mfrc522.PICC_HaltA(); // Termina a comunicação após a leitura do cartão
  }
}

String getCardUID() {
  String cardUID = "";

  for (byte i = 0; i < mfrc522.uid.size; i++) {
    cardUID.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : ""));
    cardUID.concat(String(mfrc522.uid.uidByte[i], HEX));
  }

  return cardUID;
}
